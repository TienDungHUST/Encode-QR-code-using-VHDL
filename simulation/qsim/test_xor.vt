// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/23/2020 09:31:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    test_xor_int
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module test_xor_int_vlg_sample_tst(
	inp1,
	inp2,
	sampler_tx
);
input [7:0] inp1;
input [7:0] inp2;
output sampler_tx;

reg sample;
time current_time;
always @(inp1 or inp2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module test_xor_int_vlg_check_tst (
	outp,
	sampler_rx
);
input [31:0] outp;
input sampler_rx;

reg [31:0] outp_expected;

reg [31:0] outp_prev;

reg [31:0] outp_expected_prev;

reg [31:0] last_outp_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	outp_prev = outp;
end

// update expected /o prevs

always @(trigger)
begin
	outp_expected_prev = outp_expected;
end


// expected outp[ 31 ]
initial
begin
	outp_expected[31] = 1'bX;
end 
// expected outp[ 30 ]
initial
begin
	outp_expected[30] = 1'bX;
end 
// expected outp[ 29 ]
initial
begin
	outp_expected[29] = 1'bX;
end 
// expected outp[ 28 ]
initial
begin
	outp_expected[28] = 1'bX;
end 
// expected outp[ 27 ]
initial
begin
	outp_expected[27] = 1'bX;
end 
// expected outp[ 26 ]
initial
begin
	outp_expected[26] = 1'bX;
end 
// expected outp[ 25 ]
initial
begin
	outp_expected[25] = 1'bX;
end 
// expected outp[ 24 ]
initial
begin
	outp_expected[24] = 1'bX;
end 
// expected outp[ 23 ]
initial
begin
	outp_expected[23] = 1'bX;
end 
// expected outp[ 22 ]
initial
begin
	outp_expected[22] = 1'bX;
end 
// expected outp[ 21 ]
initial
begin
	outp_expected[21] = 1'bX;
end 
// expected outp[ 20 ]
initial
begin
	outp_expected[20] = 1'bX;
end 
// expected outp[ 19 ]
initial
begin
	outp_expected[19] = 1'bX;
end 
// expected outp[ 18 ]
initial
begin
	outp_expected[18] = 1'bX;
end 
// expected outp[ 17 ]
initial
begin
	outp_expected[17] = 1'bX;
end 
// expected outp[ 16 ]
initial
begin
	outp_expected[16] = 1'bX;
end 
// expected outp[ 15 ]
initial
begin
	outp_expected[15] = 1'bX;
end 
// expected outp[ 14 ]
initial
begin
	outp_expected[14] = 1'bX;
end 
// expected outp[ 13 ]
initial
begin
	outp_expected[13] = 1'bX;
end 
// expected outp[ 12 ]
initial
begin
	outp_expected[12] = 1'bX;
end 
// expected outp[ 11 ]
initial
begin
	outp_expected[11] = 1'bX;
end 
// expected outp[ 10 ]
initial
begin
	outp_expected[10] = 1'bX;
end 
// expected outp[ 9 ]
initial
begin
	outp_expected[9] = 1'bX;
end 
// expected outp[ 8 ]
initial
begin
	outp_expected[8] = 1'bX;
end 
// expected outp[ 7 ]
initial
begin
	outp_expected[7] = 1'bX;
end 
// expected outp[ 6 ]
initial
begin
	outp_expected[6] = 1'bX;
end 
// expected outp[ 5 ]
initial
begin
	outp_expected[5] = 1'bX;
end 
// expected outp[ 4 ]
initial
begin
	outp_expected[4] = 1'bX;
end 
// expected outp[ 3 ]
initial
begin
	outp_expected[3] = 1'bX;
end 
// expected outp[ 2 ]
initial
begin
	outp_expected[2] = 1'bX;
end 
// expected outp[ 1 ]
initial
begin
	outp_expected[1] = 1'bX;
end 
// expected outp[ 0 ]
initial
begin
	outp_expected[0] = 1'bX;
end 
// generate trigger
always @(outp_expected or outp)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected outp = %b | ",outp_expected_prev);
	$display("| real outp = %b | ",outp_prev);
`endif
	if (
		( outp_expected_prev[0] !== 1'bx ) && ( outp_prev[0] !== outp_expected_prev[0] )
		&& ((outp_expected_prev[0] !== last_outp_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[0] = outp_expected_prev[0];
	end
	if (
		( outp_expected_prev[1] !== 1'bx ) && ( outp_prev[1] !== outp_expected_prev[1] )
		&& ((outp_expected_prev[1] !== last_outp_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[1] = outp_expected_prev[1];
	end
	if (
		( outp_expected_prev[2] !== 1'bx ) && ( outp_prev[2] !== outp_expected_prev[2] )
		&& ((outp_expected_prev[2] !== last_outp_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[2] = outp_expected_prev[2];
	end
	if (
		( outp_expected_prev[3] !== 1'bx ) && ( outp_prev[3] !== outp_expected_prev[3] )
		&& ((outp_expected_prev[3] !== last_outp_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[3] = outp_expected_prev[3];
	end
	if (
		( outp_expected_prev[4] !== 1'bx ) && ( outp_prev[4] !== outp_expected_prev[4] )
		&& ((outp_expected_prev[4] !== last_outp_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[4] = outp_expected_prev[4];
	end
	if (
		( outp_expected_prev[5] !== 1'bx ) && ( outp_prev[5] !== outp_expected_prev[5] )
		&& ((outp_expected_prev[5] !== last_outp_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[5] = outp_expected_prev[5];
	end
	if (
		( outp_expected_prev[6] !== 1'bx ) && ( outp_prev[6] !== outp_expected_prev[6] )
		&& ((outp_expected_prev[6] !== last_outp_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[6] = outp_expected_prev[6];
	end
	if (
		( outp_expected_prev[7] !== 1'bx ) && ( outp_prev[7] !== outp_expected_prev[7] )
		&& ((outp_expected_prev[7] !== last_outp_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[7] = outp_expected_prev[7];
	end
	if (
		( outp_expected_prev[8] !== 1'bx ) && ( outp_prev[8] !== outp_expected_prev[8] )
		&& ((outp_expected_prev[8] !== last_outp_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[8] = outp_expected_prev[8];
	end
	if (
		( outp_expected_prev[9] !== 1'bx ) && ( outp_prev[9] !== outp_expected_prev[9] )
		&& ((outp_expected_prev[9] !== last_outp_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[9] = outp_expected_prev[9];
	end
	if (
		( outp_expected_prev[10] !== 1'bx ) && ( outp_prev[10] !== outp_expected_prev[10] )
		&& ((outp_expected_prev[10] !== last_outp_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[10] = outp_expected_prev[10];
	end
	if (
		( outp_expected_prev[11] !== 1'bx ) && ( outp_prev[11] !== outp_expected_prev[11] )
		&& ((outp_expected_prev[11] !== last_outp_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[11] = outp_expected_prev[11];
	end
	if (
		( outp_expected_prev[12] !== 1'bx ) && ( outp_prev[12] !== outp_expected_prev[12] )
		&& ((outp_expected_prev[12] !== last_outp_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[12] = outp_expected_prev[12];
	end
	if (
		( outp_expected_prev[13] !== 1'bx ) && ( outp_prev[13] !== outp_expected_prev[13] )
		&& ((outp_expected_prev[13] !== last_outp_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[13] = outp_expected_prev[13];
	end
	if (
		( outp_expected_prev[14] !== 1'bx ) && ( outp_prev[14] !== outp_expected_prev[14] )
		&& ((outp_expected_prev[14] !== last_outp_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[14] = outp_expected_prev[14];
	end
	if (
		( outp_expected_prev[15] !== 1'bx ) && ( outp_prev[15] !== outp_expected_prev[15] )
		&& ((outp_expected_prev[15] !== last_outp_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[15] = outp_expected_prev[15];
	end
	if (
		( outp_expected_prev[16] !== 1'bx ) && ( outp_prev[16] !== outp_expected_prev[16] )
		&& ((outp_expected_prev[16] !== last_outp_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[16] = outp_expected_prev[16];
	end
	if (
		( outp_expected_prev[17] !== 1'bx ) && ( outp_prev[17] !== outp_expected_prev[17] )
		&& ((outp_expected_prev[17] !== last_outp_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[17] = outp_expected_prev[17];
	end
	if (
		( outp_expected_prev[18] !== 1'bx ) && ( outp_prev[18] !== outp_expected_prev[18] )
		&& ((outp_expected_prev[18] !== last_outp_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[18] = outp_expected_prev[18];
	end
	if (
		( outp_expected_prev[19] !== 1'bx ) && ( outp_prev[19] !== outp_expected_prev[19] )
		&& ((outp_expected_prev[19] !== last_outp_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[19] = outp_expected_prev[19];
	end
	if (
		( outp_expected_prev[20] !== 1'bx ) && ( outp_prev[20] !== outp_expected_prev[20] )
		&& ((outp_expected_prev[20] !== last_outp_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[20] = outp_expected_prev[20];
	end
	if (
		( outp_expected_prev[21] !== 1'bx ) && ( outp_prev[21] !== outp_expected_prev[21] )
		&& ((outp_expected_prev[21] !== last_outp_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[21] = outp_expected_prev[21];
	end
	if (
		( outp_expected_prev[22] !== 1'bx ) && ( outp_prev[22] !== outp_expected_prev[22] )
		&& ((outp_expected_prev[22] !== last_outp_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[22] = outp_expected_prev[22];
	end
	if (
		( outp_expected_prev[23] !== 1'bx ) && ( outp_prev[23] !== outp_expected_prev[23] )
		&& ((outp_expected_prev[23] !== last_outp_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[23] = outp_expected_prev[23];
	end
	if (
		( outp_expected_prev[24] !== 1'bx ) && ( outp_prev[24] !== outp_expected_prev[24] )
		&& ((outp_expected_prev[24] !== last_outp_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[24] = outp_expected_prev[24];
	end
	if (
		( outp_expected_prev[25] !== 1'bx ) && ( outp_prev[25] !== outp_expected_prev[25] )
		&& ((outp_expected_prev[25] !== last_outp_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[25] = outp_expected_prev[25];
	end
	if (
		( outp_expected_prev[26] !== 1'bx ) && ( outp_prev[26] !== outp_expected_prev[26] )
		&& ((outp_expected_prev[26] !== last_outp_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[26] = outp_expected_prev[26];
	end
	if (
		( outp_expected_prev[27] !== 1'bx ) && ( outp_prev[27] !== outp_expected_prev[27] )
		&& ((outp_expected_prev[27] !== last_outp_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[27] = outp_expected_prev[27];
	end
	if (
		( outp_expected_prev[28] !== 1'bx ) && ( outp_prev[28] !== outp_expected_prev[28] )
		&& ((outp_expected_prev[28] !== last_outp_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[28] = outp_expected_prev[28];
	end
	if (
		( outp_expected_prev[29] !== 1'bx ) && ( outp_prev[29] !== outp_expected_prev[29] )
		&& ((outp_expected_prev[29] !== last_outp_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[29] = outp_expected_prev[29];
	end
	if (
		( outp_expected_prev[30] !== 1'bx ) && ( outp_prev[30] !== outp_expected_prev[30] )
		&& ((outp_expected_prev[30] !== last_outp_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[30] = outp_expected_prev[30];
	end
	if (
		( outp_expected_prev[31] !== 1'bx ) && ( outp_prev[31] !== outp_expected_prev[31] )
		&& ((outp_expected_prev[31] !== last_outp_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outp[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outp_expected_prev);
		$display ("     Real value = %b", outp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outp_exp[31] = outp_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module test_xor_int_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] inp1;
reg [7:0] inp2;
// wires                                               
wire [31:0] outp;

wire sampler;                             

// assign statements (if any)                          
test_xor_int i1 (
// port map - connection between master ports and signals/registers   
	.inp1(inp1),
	.inp2(inp2),
	.outp(outp)
);
// inp1[ 7 ]
initial
begin
	inp1[7] = 1'b1;
end 
// inp1[ 6 ]
initial
begin
	inp1[6] = 1'b1;
end 
// inp1[ 5 ]
initial
begin
	inp1[5] = 1'b1;
end 
// inp1[ 4 ]
initial
begin
	inp1[4] = 1'b1;
end 
// inp1[ 3 ]
initial
begin
	inp1[3] = 1'b0;
end 
// inp1[ 2 ]
initial
begin
	inp1[2] = 1'b0;
end 
// inp1[ 1 ]
initial
begin
	inp1[1] = 1'b0;
end 
// inp1[ 0 ]
initial
begin
	inp1[0] = 1'b0;
end 
// inp2[ 7 ]
initial
begin
	inp2[7] = 1'b0;
end 
// inp2[ 6 ]
initial
begin
	inp2[6] = 1'b0;
end 
// inp2[ 5 ]
initial
begin
	inp2[5] = 1'b0;
end 
// inp2[ 4 ]
initial
begin
	inp2[4] = 1'b1;
end 
// inp2[ 3 ]
initial
begin
	inp2[3] = 1'b1;
end 
// inp2[ 2 ]
initial
begin
	inp2[2] = 1'b1;
end 
// inp2[ 1 ]
initial
begin
	inp2[1] = 1'b1;
end 
// inp2[ 0 ]
initial
begin
	inp2[0] = 1'b1;
end 

test_xor_int_vlg_sample_tst tb_sample (
	.inp1(inp1),
	.inp2(inp2),
	.sampler_tx(sampler)
);

test_xor_int_vlg_check_tst tb_out(
	.outp(outp),
	.sampler_rx(sampler)
);
endmodule

